//--------------------------------------------------------------------------------------
// Variables
//--------------------------------------------------------------------------------------

matrix    ModelViewProjectionMatrix;

int iSliceIndex;

//--------------------------------------------------------------------------------------
// Structs
//--------------------------------------------------------------------------------------

struct VS_VORONOI_INPUT
{
	float3 position : POSITION;
	float4 color	: COLOR;
};

struct GS_VORONOI_INPUT
{
	float4 position : POSITION;
	float4 color	: COLOR;
};

struct GS_VORONOI_OUTPUT
{
	float4 position : SV_POSITION; //former vertex positions + vertex positions generated by the geometry shader
	float4 color	: COLOR;
	//float3 distdir	: TEXTURE0;		// analog zum 2d? (bei VolSurfaces10 Effect_Undistort.fx)
	//float dist		: TEXTURE0;		//analog zum 2d?
	uint RTIndex	: SV_RenderTargetArrayIndex;
};

struct PS_VORONOI_OUTPUT
{
	float4 color : SV_Target0;
	float4 dist	 : SV_Target1;
};

//--------------------------------------------------------------------------------------
// Vertex Shader
//--------------------------------------------------------------------------------------

GS_VORONOI_INPUT VoronoiVS(VS_VORONOI_INPUT input)
{
	GS_VORONOI_INPUT output;
	output.position = mul(float4(input.position, 1.0f), ModelViewProjectionMatrix);
	output.color = input.color;
	return output;
}

//--------------------------------------------------------------------------------------
// Geometry Shader
//--------------------------------------------------------------------------------------

//[maxvertexcount()] - TODO
void TriangleGS( triangle GS_VORONOI_INPUT input[3], inout TriangleStream<GS_VORONOI_OUTPUT> tStream)
{
	// Slice index as per frame variable
	
	GS_VORONOI_OUTPUT output;
	output.RTIndex = iSliceIndex;
		
	// check if all points of the triangle have a higher/lower z value as the sliceindex-depth
	//if true
		//calculate distance function as in paper
	//else
		//divide polygon into 2 polygons, divided by the slice
		//calculate distance function for each polygon
}

//[maxvertexcount()] - TODO
void EdgeGS( line GS_VORONOI_INPUT input[2], inout TriangleStream<GS_VORONOI_OUTPUT> tStream)
{
	// Slice index as per frame variable

	GS_VORONOI_OUTPUT output;
	output.RTIndex = iSliceIndex;

	// check if all points of the edge have a higher/lower z-value as the sliceindex-depth
	// if true
		//calculate/look up distance function
	// else
		//divide edge into 2 edges, divided by the slice
		//calculate distance function for each edge
}

//[maxvertexcount()] - TODO
void VertexGS( point GS_VORONOI_INPUT input, inout TriangleStream<GS_VORONOI_OUTPUT> tStream)
{
	// Slice index as per frame variable

	GS_VORONOI_OUTPUT output;
	output.RTIndex = iSliceIndex;

	// calculate/look up distance function
}

//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------

PS_VORONOI_OUTPUT VoronoiPS(GS_VORONOI_OUTPUT input)
{
	PS_VORONOI_OUTPUT output;
	//TODO: process input
	return output;
}

//--------------------------------------------------------------------------------------
// Techniques
//--------------------------------------------------------------------------------------

technique10 GenerateVoronoiDiagram
{
	pass P1
	{
		SetVertexShader(CompileShader(vs_4_0, VoronoiVS()));
		SetGeometryShader(CompileShader(gs_4_0, TriangleGS()));
		SetPixelShader(CompileShader(ps_4_0, VoronoiPS()));
		//TODO: set states
	}
	pass P2
	{
		SetVertexShader(CompileShader(vs_4_0, VoronoiVS()));
		SetGeometryShader(CompileShader(gs_4_0, EdgeGS()));
		SetPixelShader(CompileShader(ps_4_0, VoronoiPS()));
		//TODO: set states
	}
	pass P3
	{
		SetVertexShader(CompileShader(vs_4_0, VoronoiVS()));
		SetGeometryShader(CompileShader(gs_4_0, VertexGS()));
		SetPixelShader(CompileShader(ps_4_0, VoronoiPS()));
		//TODO: set states
	}
}