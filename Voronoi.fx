//--------------------------------------------------------------------------------------
// Variables
//--------------------------------------------------------------------------------------

matrix    ModelViewProjectionMatrix;
Texture2D flatColorTexture;
Texture2D flatDistTexture;

float4 vBBMin;
float4 vBBMax;

int iSliceIndex;
int iTextureDepth;

//--------------------------------------------------------------------------------------
// Sampler
//--------------------------------------------------------------------------------------

SamplerState linearSamplerBorder
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Border;
	AddressV = Border;
};

//--------------------------------------------------------------------------------------
// States
//--------------------------------------------------------------------------------------
// RasterizerState 
RasterizerState RS_CullDisabled
{
  MultiSampleEnable = False;
  CullMode = None;
  ScissorEnable = true;
};


// BlendState
BlendState BS_NoBlending
{
  BlendEnable[0] = false;
  RenderTargetWriteMask[0] = 0x0F;
};


// DepthStencilState
DepthStencilState DSS_NonZeroRule
{
    DepthEnable = FALSE;
    DepthWriteMask = ZERO;
    
    //stencil
    StencilEnable = true;
    StencilReadMask = 0x00;
    StencilWriteMask = 0xFF;
    FrontFaceStencilFunc = Always;
    FrontFaceStencilPass = Decr;
    FrontFaceStencilFail = Keep;
    BackFaceStencilFunc = Always;
    BackFaceStencilPass = Incr;
    BackFaceStencilFail = Keep;
    
};

DepthStencilState EnableDepth
{
	DepthEnable = TRUE;
	Depthfunc = LESS_EQUAL;
	DepthWriteMask = ALL;
	StencilEnable = FALSE;
};

DepthStencilState DSS_Disabled
{
    DepthEnable = FALSE;
    DepthWriteMask = ZERO;
    
    //stencil
    //StencilEnable = FALSE;
    //StencilReadMask = 0x00;
    //StencilWriteMask = 0x00;
};

//--------------------------------------------------------------------------------------
// Structs
//--------------------------------------------------------------------------------------

struct VS_VORONOI_INPUT
{
	float3 pos		: POSITION;
	float4 color	: COLOR;
};

struct GS_VORONOI_INPUT
{
	float4 pos		: POSITION;
	float4 color	: COLOR;
};

struct GS_VORONOI_OUTPUT
{
	float4 pos		: SV_POSITION; //former vertex positions + vertex positions generated by the geometry shader
	float4 color	: COLOR;
	//float3 distdir	: TEXTURE0;		// analog zum 2d? (bei VolSurfaces10 Effect_Undistort.fx)
	//float dist		: TEXTURE0;		//analog zum 2d?
};

struct PS_VORONOI_OUTPUT
{
	float4 color : SV_Target0;
	float4 dist	 : SV_Target1;
};

struct VS_RESOLVE_INPUT
{
	float3 pos : POSITION;
	float3 tex : TEXCOORD;
};

struct GS_RESOLVE_INPUT
{
	float4 pos : POSITION;
	float3 tex : TEXCOORD;
};

struct GS_RESOLVE_OUTPUT
{
	float4 pos : SV_Position;
	float3 tex : TEXCOORD;
	uint RTIndex : SV_RenderTargetArrayIndex;
};

struct PS_RESOLVE_OUTPUT
{
	float4 color : SV_Target0;
	float4 dist  : SV_Target1;
};



//--------------------------------------------------------------------------------------
// Vertex Shader
//--------------------------------------------------------------------------------------

GS_VORONOI_INPUT VoronoiVS(VS_VORONOI_INPUT input)
{
	GS_VORONOI_INPUT output;
	output.pos = mul(float4(input.pos, 1.0f), ModelViewProjectionMatrix);
	output.color = input.color;
	return output;
}

GS_RESOLVE_INPUT ResolveVS(VS_RESOLVE_INPUT input)
{
	GS_RESOLVE_INPUT output;
	output.pos = float4(input.pos, 1.0f);
	output.tex = input.tex;
	return output;
}

//--------------------------------------------------------------------------------------
// Geometry Shader
//--------------------------------------------------------------------------------------

[maxvertexcount(3)]
void TriangleGS( triangle GS_VORONOI_INPUT input[3], inout TriangleStream<GS_VORONOI_OUTPUT> tStream)
{
	// Slice index as per frame variable
	
	GS_VORONOI_OUTPUT output;

	float zBBDist = vBBMax.z - vBBMin.z;

	float sliceDepth = (iSliceIndex/(float)iTextureDepth)*zBBDist+vBBMin.z;
		
	// check if all points of the triangle have a higher/lower z value as the sliceindex-depth
	if(input[0].pos.z < sliceDepth && input[1].pos.z < sliceDepth && input[2].pos.z < sliceDepth)
	{
		//calculate distance function as in paper
		float3 normal = cross(input[1].pos.xyz, input[2].pos.xyz);
		if(normal.z < 0)
		{
			normal = -normal;
		}

		if(normal.z != 0)
		{
			normal /= normal.z;

			for(int v = 0; v < 3; v++)
			{
				float distPosToSliceZ = sliceDepth - input[v].pos.z;
				float3 normalToPosAtSlice =	normal*distPosToSliceZ;
				output.pos = float4(input[v].pos.x+normalToPosAtSlice.x, input[v].pos.y+normalToPosAtSlice.y,  length(normalToPosAtSlice), 1.0f);
				output.color = input[v].color;
				tStream.Append(output);
			}
		}
	}
	else if(input[0].pos.z >= sliceDepth && input[1].pos.z >= sliceDepth && input[2].pos.z >= sliceDepth)
	{
		//calculate distance function as in paper
		float3 normal = cross(input[1].pos.xyz, input[2].pos.xyz);
		if(normal.z > 0)
		{
			normal = -normal;
		}
		if(normal.z != 0)
		{
			normal /= -normal.z;
			
			for(int v = 0; v < 3; v++)
			{
				float distPosToSliceZ = input[v].pos.z - sliceDepth;
				float3 normalToPosAtSlice =	normal*distPosToSliceZ;
				output.pos = float4(input[v].pos.x+normalToPosAtSlice.x, input[v].pos.y+normalToPosAtSlice.y,  length(normalToPosAtSlice), 1.0f);
				output.color = input[v].color;
				tStream.Append(output);
			}
		}
	}
	else
	{
		//divide polygon into 2 polygons, divided by the slice
		//calculate distance function for each polygon

		//for(int v = 0; v < 3; v++)
		//{
		//	output.position = input[v].position;
		//	output.color = input[v].color;
		//	tStream.Append(output);
		//}
	}
	tStream.RestartStrip();
}

[maxvertexcount(2)]
void EdgeGS( line GS_VORONOI_INPUT input[2], inout TriangleStream<GS_VORONOI_OUTPUT> tStream)
{
	// Slice index as per frame variable

	GS_VORONOI_OUTPUT output;

	for(int v = 0; v < 2; v++)
	{
		output.pos = input[v].pos;
		output.color = input[v].color;
	}

	// check if all points of the edge have a higher/lower z-value as the sliceindex-depth
	// if true
		//calculate/look up distance function
	// else
		//divide edge into 2 edges, divided by the slice
		//calculate distance function for each edge
	tStream.RestartStrip();
}

[maxvertexcount(1)]
void VertexGS( point GS_VORONOI_INPUT input[1], inout TriangleStream<GS_VORONOI_OUTPUT> tStream)
{
	// Slice index as per frame variable

	GS_VORONOI_OUTPUT output;
	output.pos = input[0].pos;
	output.color = input[0].color;
	tStream.Append(output);
	// calculate/look up distance function

	tStream.RestartStrip();
}

[maxvertexcount(3)]
void ResolveGS(triangle GS_RESOLVE_INPUT input[3], inout TriangleStream<GS_RESOLVE_OUTPUT> tStream)
{
	GS_RESOLVE_OUTPUT output;
	output.RTIndex = input[0].tex.z;
	for(int v = 0; v < 3; v++)
	{
		output.pos = input[v].pos;
		output.tex = input[v].tex;
		tStream.Append(output);
	}
	tStream.RestartStrip();
}

//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------

PS_VORONOI_OUTPUT VoronoiPS(GS_VORONOI_OUTPUT input)
{
	PS_VORONOI_OUTPUT output;
	output.color = input.color;
	output.dist = float4(input.pos.z, 0.0, 0.0, 1.0);//input.color;
	return output;
}

PS_RESOLVE_OUTPUT ResolvePS(GS_RESOLVE_OUTPUT input)
{
	PS_RESOLVE_OUTPUT output;
	output.color = flatColorTexture.SampleLevel(linearSamplerBorder, input.tex.xy, 0);
	output.dist = flatDistTexture.SampleLevel(linearSamplerBorder, input.tex.xy, 0);
	return output;
}

//--------------------------------------------------------------------------------------
// Techniques
//--------------------------------------------------------------------------------------

technique10 GenerateVoronoiDiagram
{
	pass P1
	{
		SetVertexShader(CompileShader(vs_4_0, VoronoiVS()));
		SetGeometryShader(CompileShader(gs_4_0, TriangleGS()));
		SetPixelShader(CompileShader(ps_4_0, VoronoiPS()));
		SetRasterizerState( RS_CullDisabled );
        SetBlendState( BS_NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( EnableDepth, 0 );
	}
	/*pass P2
	{
		SetVertexShader(CompileShader(vs_4_0, VoronoiVS()));
		SetGeometryShader(CompileShader(gs_4_0, EdgeGS()));
		SetPixelShader(CompileShader(ps_4_0, VoronoiPS()));
		//TODO: set states
	}
	pass P3
	{
		SetVertexShader(CompileShader(vs_4_0, VoronoiVS()));
		SetGeometryShader(CompileShader(gs_4_0, VertexGS()));
		SetPixelShader(CompileShader(ps_4_0, VoronoiPS()));
		//TODO: set states
	}*/
}

technique10 Flat2DTextureTo3D
{
	pass F2DTTo3D
	{
		SetVertexShader(CompileShader(vs_4_0, ResolveVS()));
		SetGeometryShader(CompileShader(gs_4_0, ResolveGS()));
		SetPixelShader(CompileShader(ps_4_0, ResolvePS()));
		 SetRasterizerState( RS_CullDisabled );
        SetBlendState( BS_NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( DSS_Disabled, 0 );
	}
}